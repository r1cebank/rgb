use crate::cpu::instruction::{
    Address, AddressLocation, AddressSource, AddressTarget, ArithmeticOperationType,
    ArithmeticSource, ArithmeticTarget, BitArthOperationType, BitOperationTarget, BitTestLocation,
    BitTestSource, BitTestType, Condition, ConditionSource, IncDecOperationType, IncDecTarget,
    Instruction, LoadSource, LoadType, OperationType, Register, RegisterSource, RegisterTarget,
    Value,
};

/// SM83 non prefixed instruction map
///
pub static INSTRUCTION_MAP: [[Instruction; 0x10]; 0x10] = [
    // 0
    [
        Instruction::NOP,
        Instruction::LD(OperationType::ValueToRegister(Register::BC, Value::D16)),
        Instruction::LD(OperationType::RegisterToAddress(Address::BC, Register::A)),
        Instruction::INC(IncDecOperationType::ToRegister(IncDecTarget::BC)),
        Instruction::INC(IncDecOperationType::ToRegister(IncDecTarget::B)),
        Instruction::DEC(IncDecOperationType::ToRegister(IncDecTarget::B)),
        Instruction::LD(OperationType::ValueToRegister(Register::B, Value::D8)),
        Instruction::RLCA,
        Instruction::LD(OperationType::RegisterToAddress(Address::A16, Register::SP)),
        Instruction::ADD(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::HL,
            ArithmeticSource::BC,
        )),
        Instruction::LD(OperationType::AddressToRegister(Register::A, Address::BC)),
        Instruction::DEC(IncDecOperationType::ToRegister(IncDecTarget::BC)),
        Instruction::INC(IncDecOperationType::ToRegister(IncDecTarget::C)),
        Instruction::DEC(IncDecOperationType::ToRegister(IncDecTarget::C)),
        Instruction::LD(OperationType::ValueToRegister(Register::C, Value::D8)),
        Instruction::RRCA,
    ],
    // 1
    [
        Instruction::STOP,
        Instruction::LD(OperationType::ValueToRegister(Register::DE, Value::D16)),
        Instruction::LD(OperationType::RegisterToAddress(Address::DE, Register::A)),
        Instruction::INC(IncDecOperationType::ToRegister(IncDecTarget::DE)),
        Instruction::INC(IncDecOperationType::ToRegister(IncDecTarget::D)),
        Instruction::DEC(IncDecOperationType::ToRegister(IncDecTarget::D)),
        Instruction::LD(OperationType::ValueToRegister(Register::D, Value::D8)),
        Instruction::RLA,
        Instruction::JR(Condition::Always, ConditionSource::R8),
        Instruction::ADD(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::HL,
            ArithmeticSource::DE,
        )),
        Instruction::LD(OperationType::AddressToRegister(Register::A, Address::DE)),
        Instruction::DEC(IncDecOperationType::ToRegister(IncDecTarget::DE)),
        Instruction::INC(IncDecOperationType::ToRegister(IncDecTarget::E)),
        Instruction::DEC(IncDecOperationType::ToRegister(IncDecTarget::E)),
        Instruction::LD(OperationType::ValueToRegister(Register::E, Value::D8)),
        Instruction::RRA,
    ],
    // 2
    [
        Instruction::JR(Condition::NotZero, ConditionSource::R8),
        Instruction::LD(OperationType::ValueToRegister(Register::HL, Value::D16)),
        Instruction::LD(OperationType::RegisterToAddress(Address::HLP, Register::A)),
        Instruction::INC(IncDecOperationType::ToRegister(IncDecTarget::HL)),
        Instruction::INC(IncDecOperationType::ToRegister(IncDecTarget::H)),
        Instruction::DEC(IncDecOperationType::ToRegister(IncDecTarget::H)),
        Instruction::LD(OperationType::ValueToRegister(Register::H, Value::D8)),
        Instruction::DAA,
        Instruction::JR(Condition::Zero, ConditionSource::R8),
        Instruction::ADD(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::HL,
            ArithmeticSource::HL,
        )),
        Instruction::LD(OperationType::AddressToRegister(Register::A, Address::HLP)),
        Instruction::DEC(IncDecOperationType::ToRegister(IncDecTarget::HL)),
        Instruction::INC(IncDecOperationType::ToRegister(IncDecTarget::L)),
        Instruction::DEC(IncDecOperationType::ToRegister(IncDecTarget::L)),
        Instruction::LD(OperationType::ValueToRegister(Register::L, Value::D8)),
        Instruction::CPL,
    ],
    // 3
    [
        Instruction::JR(Condition::NotCarry, ConditionSource::R8),
        Instruction::LD(OperationType::ValueToRegister(Register::SP, Value::D16)),
        Instruction::LD(OperationType::RegisterToAddress(Address::HLM, Register::A)),
        Instruction::INC(IncDecOperationType::ToRegister(IncDecTarget::SP)),
        Instruction::INC(IncDecOperationType::ToAddress(IncDecTarget::HL)),
        Instruction::DEC(IncDecOperationType::ToAddress(IncDecTarget::HL)),
        Instruction::LD(OperationType::ValueToAddress(Address::HL, Value::D8)),
        Instruction::SCF,
        Instruction::JR(Condition::Carry, ConditionSource::R8),
        Instruction::ADD(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::HL,
            ArithmeticSource::SP,
        )),
        Instruction::LD(OperationType::AddressToRegister(Register::A, Address::HLM)),
        Instruction::DEC(IncDecOperationType::ToRegister(IncDecTarget::SP)),
        Instruction::INC(IncDecOperationType::ToRegister(IncDecTarget::A)),
        Instruction::DEC(IncDecOperationType::ToRegister(IncDecTarget::A)),
        Instruction::LD(OperationType::ValueToRegister(Register::A, Value::D8)),
        Instruction::CCF,
    ],
    // 4
    [
        Instruction::LD(OperationType::RegisterToRegister(Register::B, Register::B)),
        Instruction::LD(OperationType::RegisterToRegister(Register::B, Register::C)),
        Instruction::LD(OperationType::RegisterToRegister(Register::B, Register::D)),
        Instruction::LD(OperationType::RegisterToRegister(Register::B, Register::E)),
        Instruction::LD(OperationType::RegisterToRegister(Register::B, Register::H)),
        Instruction::LD(OperationType::RegisterToRegister(Register::B, Register::L)),
        Instruction::LD(OperationType::AddressToRegister(Register::B, Address::HL)),
        Instruction::LD(OperationType::RegisterToRegister(Register::B, Register::A)),
        Instruction::LD(OperationType::RegisterToRegister(Register::C, Register::B)),
        Instruction::LD(OperationType::RegisterToRegister(Register::C, Register::C)),
        Instruction::LD(OperationType::RegisterToRegister(Register::C, Register::D)),
        Instruction::LD(OperationType::RegisterToRegister(Register::C, Register::E)),
        Instruction::LD(OperationType::RegisterToRegister(Register::C, Register::H)),
        Instruction::LD(OperationType::RegisterToRegister(Register::C, Register::L)),
        Instruction::LD(OperationType::AddressToRegister(Register::C, Address::HL)),
        Instruction::LD(OperationType::RegisterToRegister(Register::C, Register::A)),
    ],
    // 5
    [
        Instruction::LD(OperationType::RegisterToRegister(Register::D, Register::B)),
        Instruction::LD(OperationType::RegisterToRegister(Register::D, Register::C)),
        Instruction::LD(OperationType::RegisterToRegister(Register::D, Register::D)),
        Instruction::LD(OperationType::RegisterToRegister(Register::D, Register::E)),
        Instruction::LD(OperationType::RegisterToRegister(Register::D, Register::H)),
        Instruction::LD(OperationType::RegisterToRegister(Register::D, Register::L)),
        Instruction::LD(OperationType::AddressToRegister(Register::D, Address::HL)),
        Instruction::LD(OperationType::RegisterToRegister(Register::D, Register::A)),
        Instruction::LD(OperationType::RegisterToRegister(Register::E, Register::B)),
        Instruction::LD(OperationType::RegisterToRegister(Register::E, Register::C)),
        Instruction::LD(OperationType::RegisterToRegister(Register::E, Register::D)),
        Instruction::LD(OperationType::RegisterToRegister(Register::E, Register::E)),
        Instruction::LD(OperationType::RegisterToRegister(Register::E, Register::H)),
        Instruction::LD(OperationType::RegisterToRegister(Register::E, Register::L)),
        Instruction::LD(OperationType::AddressToRegister(Register::E, Address::HL)),
        Instruction::LD(OperationType::RegisterToRegister(Register::E, Register::A)),
    ],
    // 6
    [
        Instruction::LD(OperationType::RegisterToRegister(Register::H, Register::B)),
        Instruction::LD(OperationType::RegisterToRegister(Register::H, Register::C)),
        Instruction::LD(OperationType::RegisterToRegister(Register::H, Register::D)),
        Instruction::LD(OperationType::RegisterToRegister(Register::H, Register::E)),
        Instruction::LD(OperationType::RegisterToRegister(Register::H, Register::H)),
        Instruction::LD(OperationType::RegisterToRegister(Register::H, Register::L)),
        Instruction::LD(OperationType::AddressToRegister(Register::H, Address::HL)),
        Instruction::LD(OperationType::RegisterToRegister(Register::H, Register::A)),
        Instruction::LD(OperationType::RegisterToRegister(Register::L, Register::B)),
        Instruction::LD(OperationType::RegisterToRegister(Register::L, Register::C)),
        Instruction::LD(OperationType::RegisterToRegister(Register::L, Register::D)),
        Instruction::LD(OperationType::RegisterToRegister(Register::L, Register::E)),
        Instruction::LD(OperationType::RegisterToRegister(Register::L, Register::H)),
        Instruction::LD(OperationType::RegisterToRegister(Register::L, Register::L)),
        Instruction::LD(OperationType::AddressToRegister(Register::L, Address::HL)),
        Instruction::LD(OperationType::RegisterToRegister(Register::L, Register::A)),
    ],
    // 7
    [
        Instruction::LD(OperationType::RegisterToAddress(Address::HL, Register::B)),
        Instruction::LD(OperationType::RegisterToAddress(Address::HL, Register::C)),
        Instruction::LD(OperationType::RegisterToAddress(Address::HL, Register::D)),
        Instruction::LD(OperationType::RegisterToAddress(Address::HL, Register::E)),
        Instruction::LD(OperationType::RegisterToAddress(Address::HL, Register::H)),
        Instruction::LD(OperationType::RegisterToAddress(Address::HL, Register::L)),
        Instruction::HALT,
        Instruction::LD(OperationType::RegisterToAddress(Address::HL, Register::A)),
        Instruction::LD(OperationType::RegisterToRegister(Register::A, Register::B)),
        Instruction::LD(OperationType::RegisterToRegister(Register::A, Register::C)),
        Instruction::LD(OperationType::RegisterToRegister(Register::A, Register::D)),
        Instruction::LD(OperationType::RegisterToRegister(Register::A, Register::E)),
        Instruction::LD(OperationType::RegisterToRegister(Register::A, Register::H)),
        Instruction::LD(OperationType::RegisterToRegister(Register::A, Register::L)),
        Instruction::LD(OperationType::AddressToRegister(Register::A, Address::HL)),
        Instruction::LD(OperationType::RegisterToRegister(Register::A, Register::A)),
    ],
    // 8
    [
        Instruction::ADD(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::B,
        )),
        Instruction::ADD(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::C,
        )),
        Instruction::ADD(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::D,
        )),
        Instruction::ADD(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::E,
        )),
        Instruction::ADD(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::H,
        )),
        Instruction::ADD(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::L,
        )),
        Instruction::ADD(ArithmeticOperationType::FromAddress(
            ArithmeticTarget::A,
            ArithmeticSource::HL,
        )),
        Instruction::ADD(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::A,
        )),
        Instruction::ADC(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::B,
        )),
        Instruction::ADC(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::C,
        )),
        Instruction::ADC(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::D,
        )),
        Instruction::ADC(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::E,
        )),
        Instruction::ADC(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::H,
        )),
        Instruction::ADC(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::L,
        )),
        Instruction::ADC(ArithmeticOperationType::FromAddress(
            ArithmeticTarget::A,
            ArithmeticSource::HL,
        )),
        Instruction::ADC(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::A,
        )),
    ],
    // 9
    [
        Instruction::SUB(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::B,
        )),
        Instruction::SUB(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::C,
        )),
        Instruction::SUB(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::D,
        )),
        Instruction::SUB(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::E,
        )),
        Instruction::SUB(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::H,
        )),
        Instruction::SUB(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::L,
        )),
        Instruction::SUB(ArithmeticOperationType::FromAddress(
            ArithmeticTarget::A,
            ArithmeticSource::HL,
        )),
        Instruction::SUB(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::A,
        )),
        Instruction::SBC(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::B,
        )),
        Instruction::SBC(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::C,
        )),
        Instruction::SBC(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::D,
        )),
        Instruction::SBC(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::E,
        )),
        Instruction::SBC(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::H,
        )),
        Instruction::SBC(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::L,
        )),
        Instruction::SBC(ArithmeticOperationType::FromAddress(
            ArithmeticTarget::A,
            ArithmeticSource::HL,
        )),
        Instruction::SBC(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::A,
        )),
    ],
    // a
    [
        Instruction::AND(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::B,
        )),
        Instruction::AND(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::C,
        )),
        Instruction::AND(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::D,
        )),
        Instruction::AND(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::E,
        )),
        Instruction::AND(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::H,
        )),
        Instruction::AND(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::L,
        )),
        Instruction::AND(ArithmeticOperationType::FromAddress(
            ArithmeticTarget::A,
            ArithmeticSource::HL,
        )),
        Instruction::AND(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::A,
        )),
        Instruction::XOR(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::B,
        )),
        Instruction::XOR(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::C,
        )),
        Instruction::XOR(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::D,
        )),
        Instruction::XOR(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::E,
        )),
        Instruction::XOR(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::H,
        )),
        Instruction::XOR(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::L,
        )),
        Instruction::XOR(ArithmeticOperationType::FromAddress(
            ArithmeticTarget::A,
            ArithmeticSource::HL,
        )),
        Instruction::XOR(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::A,
        )),
    ],
    // b
    [
        Instruction::OR(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::B,
        )),
        Instruction::OR(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::C,
        )),
        Instruction::OR(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::D,
        )),
        Instruction::OR(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::E,
        )),
        Instruction::OR(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::H,
        )),
        Instruction::OR(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::L,
        )),
        Instruction::OR(ArithmeticOperationType::FromAddress(
            ArithmeticTarget::A,
            ArithmeticSource::HL,
        )),
        Instruction::OR(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::A,
        )),
        Instruction::CP(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::B,
        )),
        Instruction::CP(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::C,
        )),
        Instruction::CP(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::D,
        )),
        Instruction::CP(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::E,
        )),
        Instruction::CP(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::H,
        )),
        Instruction::CP(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::L,
        )),
        Instruction::CP(ArithmeticOperationType::FromAddress(
            ArithmeticTarget::A,
            ArithmeticSource::HL,
        )),
        Instruction::CP(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::A,
        )),
    ],
    // c
    [
        Instruction::RET(Condition::NotZero),
        Instruction::POP(RegisterTarget::BC),
        Instruction::JP(Condition::NotZero, ConditionSource::A16),
        Instruction::JP(Condition::Always, ConditionSource::A16),
        Instruction::CALL(Condition::NotZero, ConditionSource::A16),
        Instruction::PUSH(RegisterSource::BC),
        Instruction::ADD(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::D8,
        )),
        Instruction::RST(AddressLocation::X00H),
        Instruction::RET(Condition::Zero),
        Instruction::RET(Condition::Always),
        Instruction::JP(Condition::Zero, ConditionSource::A16),
        Instruction::PREFIX,
        Instruction::CALL(Condition::Zero, ConditionSource::A16),
        Instruction::CALL(Condition::Always, ConditionSource::A16),
        Instruction::ADC(ArithmeticOperationType::FromAddress(
            ArithmeticTarget::A,
            ArithmeticSource::D8,
        )),
        Instruction::RST(AddressLocation::X08H),
    ],
    // d
    [
        Instruction::RET(Condition::NotCarry),
        Instruction::POP(RegisterTarget::DE),
        Instruction::JP(Condition::NotCarry, ConditionSource::A16),
        Instruction::NAI,
        Instruction::CALL(Condition::NotCarry, ConditionSource::A16),
        Instruction::PUSH(RegisterSource::DE),
        Instruction::SUB(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::D8,
        )),
        Instruction::RST(AddressLocation::X10H),
        Instruction::RET(Condition::Carry),
        Instruction::RETI,
        Instruction::JP(Condition::Carry, ConditionSource::A16),
        Instruction::NAI,
        Instruction::CALL(Condition::Carry, ConditionSource::A16),
        Instruction::NAI,
        Instruction::SBC(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::D8,
        )),
        Instruction::RST(AddressLocation::X18H),
    ],
    // e
    [
        Instruction::LDH(LoadType::ToOffsetAddress(AddressTarget::A8, LoadSource::A)),
        Instruction::POP(RegisterTarget::HL),
        Instruction::LD(OperationType::RegisterToAddress(Address::C, Register::A)),
        Instruction::NAI,
        Instruction::NAI,
        Instruction::PUSH(RegisterSource::HL),
        Instruction::AND(ArithmeticOperationType::FromAddress(
            ArithmeticTarget::A,
            ArithmeticSource::D8,
        )),
        Instruction::RST(AddressLocation::X20H),
        Instruction::ADD(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::SP,
            ArithmeticSource::R8,
        )),
        Instruction::JP(Condition::Always, ConditionSource::HL),
        Instruction::LD(OperationType::RegisterToAddress(Address::A16, Register::A)),
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::XOR(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::D8,
        )),
        Instruction::RST(AddressLocation::X28H),
    ],
    // f
    [
        Instruction::LDH(LoadType::FromAddress(RegisterTarget::A, AddressSource::A8)),
        Instruction::POP(RegisterTarget::AF),
        Instruction::LD(OperationType::AddressToRegister(Register::A, Address::C)),
        Instruction::DI,
        Instruction::NAI,
        Instruction::PUSH(RegisterSource::AF),
        Instruction::OR(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::D8,
        )),
        Instruction::RST(AddressLocation::X30H),
        Instruction::LD(OperationType::RegisterToRegister(
            Register::HL,
            Register::SPP,
        )),
        Instruction::LD(OperationType::RegisterToRegister(
            Register::SP,
            Register::HL,
        )),
        Instruction::LD(OperationType::AddressToRegister(Register::A, Address::A16)),
        Instruction::EI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::CP(ArithmeticOperationType::ToRegister(
            ArithmeticTarget::A,
            ArithmeticSource::D8,
        )),
        Instruction::RST(AddressLocation::X38H),
    ],
];

/// SM83 prefixed instruction map
///
pub static PREFIX_INSTRUCTION_MAP: [[Instruction; 0x10]; 0x10] = [
    // 0
    [
        Instruction::RLC(BitArthOperationType::ToRegister(BitOperationTarget::B)),
        Instruction::RLC(BitArthOperationType::ToRegister(BitOperationTarget::C)),
        Instruction::RLC(BitArthOperationType::ToRegister(BitOperationTarget::D)),
        Instruction::RLC(BitArthOperationType::ToRegister(BitOperationTarget::E)),
        Instruction::RLC(BitArthOperationType::ToRegister(BitOperationTarget::H)),
        Instruction::RLC(BitArthOperationType::ToRegister(BitOperationTarget::L)),
        Instruction::RLC(BitArthOperationType::ToAddress(BitOperationTarget::HL)),
        Instruction::RLC(BitArthOperationType::ToRegister(BitOperationTarget::A)),
        Instruction::RRC(BitArthOperationType::ToRegister(BitOperationTarget::B)),
        Instruction::RRC(BitArthOperationType::ToRegister(BitOperationTarget::C)),
        Instruction::RRC(BitArthOperationType::ToRegister(BitOperationTarget::D)),
        Instruction::RRC(BitArthOperationType::ToRegister(BitOperationTarget::E)),
        Instruction::RRC(BitArthOperationType::ToRegister(BitOperationTarget::H)),
        Instruction::RRC(BitArthOperationType::ToRegister(BitOperationTarget::L)),
        Instruction::RRC(BitArthOperationType::ToAddress(BitOperationTarget::HL)),
        Instruction::RRC(BitArthOperationType::ToRegister(BitOperationTarget::A)),
    ],
    // 1
    [
        Instruction::RL(BitArthOperationType::ToRegister(BitOperationTarget::B)),
        Instruction::RL(BitArthOperationType::ToRegister(BitOperationTarget::C)),
        Instruction::RL(BitArthOperationType::ToRegister(BitOperationTarget::D)),
        Instruction::RL(BitArthOperationType::ToRegister(BitOperationTarget::E)),
        Instruction::RL(BitArthOperationType::ToRegister(BitOperationTarget::H)),
        Instruction::RL(BitArthOperationType::ToRegister(BitOperationTarget::L)),
        Instruction::RL(BitArthOperationType::ToAddress(BitOperationTarget::HL)),
        Instruction::RL(BitArthOperationType::ToRegister(BitOperationTarget::A)),
        Instruction::RR(BitArthOperationType::ToRegister(BitOperationTarget::B)),
        Instruction::RR(BitArthOperationType::ToRegister(BitOperationTarget::C)),
        Instruction::RR(BitArthOperationType::ToRegister(BitOperationTarget::D)),
        Instruction::RR(BitArthOperationType::ToRegister(BitOperationTarget::E)),
        Instruction::RR(BitArthOperationType::ToRegister(BitOperationTarget::H)),
        Instruction::RR(BitArthOperationType::ToRegister(BitOperationTarget::L)),
        Instruction::RR(BitArthOperationType::ToAddress(BitOperationTarget::HL)),
        Instruction::RR(BitArthOperationType::ToRegister(BitOperationTarget::A)),
    ],
    // 2
    [
        Instruction::SLA(BitArthOperationType::ToRegister(BitOperationTarget::B)),
        Instruction::SLA(BitArthOperationType::ToRegister(BitOperationTarget::C)),
        Instruction::SLA(BitArthOperationType::ToRegister(BitOperationTarget::D)),
        Instruction::SLA(BitArthOperationType::ToRegister(BitOperationTarget::E)),
        Instruction::SLA(BitArthOperationType::ToRegister(BitOperationTarget::H)),
        Instruction::SLA(BitArthOperationType::ToRegister(BitOperationTarget::L)),
        Instruction::SLA(BitArthOperationType::ToAddress(BitOperationTarget::HL)),
        Instruction::SLA(BitArthOperationType::ToRegister(BitOperationTarget::A)),
        Instruction::SRA(BitArthOperationType::ToRegister(BitOperationTarget::B)),
        Instruction::SRA(BitArthOperationType::ToRegister(BitOperationTarget::C)),
        Instruction::SRA(BitArthOperationType::ToRegister(BitOperationTarget::D)),
        Instruction::SRA(BitArthOperationType::ToRegister(BitOperationTarget::E)),
        Instruction::SRA(BitArthOperationType::ToRegister(BitOperationTarget::H)),
        Instruction::SRA(BitArthOperationType::ToRegister(BitOperationTarget::L)),
        Instruction::SRA(BitArthOperationType::ToAddress(BitOperationTarget::HL)),
        Instruction::SRA(BitArthOperationType::ToRegister(BitOperationTarget::A)),
    ],
    // 3
    [
        Instruction::SWAP(BitArthOperationType::ToRegister(BitOperationTarget::B)),
        Instruction::SWAP(BitArthOperationType::ToRegister(BitOperationTarget::C)),
        Instruction::SWAP(BitArthOperationType::ToRegister(BitOperationTarget::D)),
        Instruction::SWAP(BitArthOperationType::ToRegister(BitOperationTarget::E)),
        Instruction::SWAP(BitArthOperationType::ToRegister(BitOperationTarget::H)),
        Instruction::SWAP(BitArthOperationType::ToRegister(BitOperationTarget::L)),
        Instruction::SWAP(BitArthOperationType::ToAddress(BitOperationTarget::HL)),
        Instruction::SWAP(BitArthOperationType::ToRegister(BitOperationTarget::A)),
        Instruction::SRL(BitArthOperationType::ToRegister(BitOperationTarget::B)),
        Instruction::SRL(BitArthOperationType::ToRegister(BitOperationTarget::C)),
        Instruction::SRL(BitArthOperationType::ToRegister(BitOperationTarget::D)),
        Instruction::SRL(BitArthOperationType::ToRegister(BitOperationTarget::E)),
        Instruction::SRL(BitArthOperationType::ToRegister(BitOperationTarget::H)),
        Instruction::SRL(BitArthOperationType::ToRegister(BitOperationTarget::L)),
        Instruction::SRL(BitArthOperationType::ToAddress(BitOperationTarget::HL)),
        Instruction::SRL(BitArthOperationType::ToRegister(BitOperationTarget::A)),
    ],
    // 4
    [
        Instruction::BIT(BitTestType::FromRegister(
            BitTestLocation::B0,
            BitTestSource::B,
        )),
        Instruction::BIT(BitTestType::FromRegister(
            BitTestLocation::B0,
            BitTestSource::C,
        )),
        Instruction::BIT(BitTestType::FromRegister(
            BitTestLocation::B0,
            BitTestSource::D,
        )),
        Instruction::BIT(BitTestType::FromRegister(
            BitTestLocation::B0,
            BitTestSource::E,
        )),
        Instruction::BIT(BitTestType::FromRegister(
            BitTestLocation::B0,
            BitTestSource::H,
        )),
        Instruction::BIT(BitTestType::FromRegister(
            BitTestLocation::B0,
            BitTestSource::L,
        )),
        Instruction::BIT(BitTestType::FromAddress(
            BitTestLocation::B0,
            BitTestSource::HL,
        )),
        Instruction::BIT(BitTestType::FromRegister(
            BitTestLocation::B0,
            BitTestSource::A,
        )),
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
    ],
    // 5
    [
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
    ],
    // 6
    [
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
    ],
    // 7
    [
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
    ],
    // 8
    [
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
    ],
    // 9
    [
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
    ],
    // a
    [
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
    ],
    // b
    [
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
    ],
    // c
    [
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
    ],
    // d
    [
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
    ],
    // e
    [
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
    ],
    // f
    [
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
        Instruction::NAI,
    ],
];
